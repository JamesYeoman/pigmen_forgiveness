buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

def modGroup = mod_group.replace('${modid}', modid)
def corePlugin = core_plugin.replace('${modGroup}', modGroup)
def mixinConfigs = mixin_configs.replace('${modid}', modid)

version = "${version}"
group = "${modGroup}"
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets.main.ext.refMap = "mixins.${modid}.refmap.json".toString()

minecraft {
    mappings channel: 'snapshot', version: mappingsVersion

    def runJvmArgs = [
            '-Dmixin.hotSwap=true',
            '-Dmixin.checks.interfaces=true',
            "-Dfml.coreMods.load=${corePlugin}"
    ]

    runs {
        client {
            jvmArgs = runJvmArgs
            workingDirectory project.file('run')
            property 'forge.logging.markers', loggingMarkers
            property 'forge.logging.console.level', 'debug'
        }

        server {
            jvmArgs = runJvmArgs
            property 'forge.logging.markers', loggingMarkers
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    compile('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

task generateJava(type:Copy) {
    def templateContext = [
            modid: modid,
            modName: modName,
            version: version,
            modGroup: modGroup
    ]
    inputs.properties templateContext // for gradle up-to-date check
    from 'src/template/java'
    into "$buildDir/generated/java"
    expand templateContext
}

configure(generateJava) {
    group = 'build'
}

sourceSets.main.java.srcDir "$buildDir/generated/java" // add the extra source dir
compileJava.dependsOn generateJava // wire the generateJava task into the DAG

processResources {
    def foo = [
            'modid': modid,
            'modName': modName,
            'version': version,
            'mcversion': minecraftVersion,
            'modDescription': modDescription,
            'modAuthor': modAuthor
    ]

    inputs.properties foo

    // Go over the main resources and process _only_ the mcmod.info file
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand foo
    }

    // Go over the main resources again and process everything _but_ the already processed files
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from {
        configurations.compile
                .filter { "mixin-0.8.3-SNAPSHOT.jar" == it.name }
                .collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest.attributes (
        "FMLCorePlugin": corePlugin,
        "FMLCorePluginContainsFMLMod": "true",
        "ForceLoadAsMod": "true",
        "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
        "TweakOrder": "0",
        "MixinConfigs": mixinConfigs
    )
}
